package analysis;

import java.io.*;
import java.util.*;

import matching.Freebase;
import matching.Utils;

import wrappers.AccMeasurements;
import wrappers.Entity;
import wrappers.Result;

/**
 * This script analyzes the results generated by {@link Mapper}. It outputs a file of the following format:<br>
 * [Reverb Entity] [Correct Entity Depth in Freebase] [Correct Entity Depth in Matched Freebase Entities]
 */
public class Analyze {

	public static void analyze(Freebase fb, Map<String, Set<String>> correctMatches, File input, File output, AccMeasurements acc, boolean debug) throws IOException{
		List<Result> results = Utils.parseOutputFile(input, fb, debug);
		Set<Result> uniqueResults = new HashSet<Result>();
		
		for(Result res : results){
			if(correctMatches.containsKey(res.q.orig) && !uniqueResults.contains(res)){
				uniqueResults.add(res);
				
				Map<Integer, Integer> counts = new HashMap<Integer, Integer>();
				for(int threshold : acc)
					counts.put(threshold, 0);
				Set<String> correct = correctMatches.get(res.q.orig);
				int depth = 0;
				for(Entity e : res){
					if(correct.contains(e.id)){
						for(Integer threshold : counts.keySet()){
							if(depth < threshold)
								counts.put(threshold, counts.get(threshold) + 1);
						}
					}
					
					depth++;
					if(depth == acc.max)
						break;
				}
				acc.add(res.q.orig, counts, correct.size(), res.size());
			}
		}
		if(debug)
			System.out.println(acc);
		BufferedWriter out = new BufferedWriter(new FileWriter(output));
		out.write(acc.toString());
		out.flush();
	}
	
	public static Map<String, Set<String>> loadCorrectMatches(String path) throws FileNotFoundException{
		Map<String, Set<String>> rtn = new HashMap<String, Set<String>>();
		Scanner s = new Scanner(new FileReader(new File(path)));
		
		while(s.hasNextLine()){
			String[] parts = s.nextLine().split("\t");
			if(!rtn.containsKey(parts[0]))
				rtn.put(parts[0], new HashSet<String>());
			rtn.get(parts[0]).add(parts[1]);
		}
		
		return rtn;
	}
}
