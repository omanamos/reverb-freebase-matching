package analysis;

import java.io.*;
import java.util.*;

import matching.Freebase;
import matching.Mapper;
import matching.Utils;

import wrappers.Entity;
import wrappers.Options;
import wrappers.Result;

/**
 * This script analyzes the results generated by {@link Mapper}. It outputs a file of the following format:<br>
 * [Reverb Entity] [Correct Entity Depth in Freebase] [Correct Entity Depth in Matched Freebase Entities]
 */
public class Analyze {

	public static void main(String[] args) throws FileNotFoundException{
		//Ouput file to analyze
		String fileName = "output/output-full-3.0.txt";
		
		//Load in freebase
		Freebase fb = Freebase.loadFreebaseEntities(Options.getDefaults());
		
		Map<String, String> correctMatches = loadCorrectMatches();
		//Map<String, String> missingMatches = loadMissingMatches();
		
		List<Result> results = Utils.parseOutputFile(new File(fileName), fb);
		Set<Result> uniqueResults = new HashSet<Result>();
		
		for(Result res : results){
			if(!uniqueResults.contains(res)){
				String correctID = correctMatches.get(res.query);
				if(res.hasMatch(correctID)){
					Entity e = res.getMatch(correctID);
					
					int fbDepth = e.offset + 1;
					int resDepth = res.getDepth(correctID);
					
					System.out.println(res.query + "\t" + fbDepth + "\t" + resDepth);
				}else{
					System.out.println(res.query + "\t" + Integer.MAX_VALUE + "\t" + Integer.MAX_VALUE);
				}
				uniqueResults.add(res);
			}
		}
	}
	
	/**
	 * @param fb Fully loaded Freebase
	 * @return Reverb Entity -> id of correct Freebase match
	 * @throws FileNotFoundException
	 */
	public static Map<String, String> loadCorrectMatches() throws FileNotFoundException{
		Map<String, String> rtn = new HashMap<String, String>();
		Scanner s = new Scanner(new FileReader(new File("output/keys/match-lookup.txt")));
		
		while(s.hasNextLine()){
			String[] parts = s.nextLine().split("\t");
			rtn.put(parts[0], parts[1]);
		}
		
		return rtn;
	}
	
	@SuppressWarnings("unused")
	private static Map<String, String> loadMissingMatches(){
		Map<String, String> rtn = new HashMap<String, String>();
		
		return rtn;
	}
}
